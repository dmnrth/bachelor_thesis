subset_logreturns <- log(subset / lag(subset, 1, na.pad=TRUE))
subset_logreturns <- na.omit(subset_logreturns)
x <- NULL
x <- get_garch_forecast(subset_logreturns, 30, p, q, garch_error_distr, 2611)
if(j == 1){
forecasts_df <- x[[1]]
} else {
forecasts_df <- cbind(forecasts_df, x[[1]])
}
log_line <- paste0("[", Sys.time(), "] period: (", i + 1, "/192): ", months_forward(start_date, i), "/", months_forward(start_date, i+t)-1,
" - stock: (", j, "/30): ", df[months_forward(start_date, i+t), j],
x[[2]])
log_file <- rbind(log_file, log_line)
forecasts_df_colnames <- c(forecasts_df_colnames, colnames(subset))
#readline()
}
}
colnames(forecasts_df) <- forecasts_df_colnames
write.csv(forecasts_df, file = paste0(path, months_forward(start_date, i+t), ".csv", sep = ""))
}
load("price_data_volume.Rda")
load("price_data_volume.Rda")
vol <- price_data
libraries <- c("aTSA", "forecast", "nloptr", "rugarch", "quantmod", "xts", "zoo")
for(i in libraries){
installed <- require(i, character.only = TRUE)
if(installed == FALSE){
install.packages(i)
}
}
rm(i, installed, libraries)
df <- read.csv("c_list.csv", sep = ",", header = TRUE, row.names = 1)
df <- as.xts(df)
load("price_data_volume.Rda")
vol <- price_data
load("price_data.Rda")
get_month_length <- function(date){
year <- as.numeric(format(date, '%Y'))
if((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0){
month_days_number = c(31,29,31,30,31,30,31,31,30,31,30,31)
}else{
month_days_number = c(31,28,31,30,31,30,31,31,30,31,30,31)
}
month <- as.numeric(format(date, '%m'))
return(month_days_number[month])
}
months_forward <- function(date, n){
if(n == 0){
return(date)
}
new_date <- date
for(i in 1:n){
new_date = new_date + get_month_length(new_date)
}
return(new_date)
}
start_date <- as.Date("2006-01-01")
low <- data.frame(row.names = index(df))
mid <- data.frame(row.names = index(df))
high <- data.frame(row.names = index(df))
cap_est <- price_data * vol
for(i in 0:191){
tickers <-  as.character(df[paste0(months_forward(start_date, i + 12))])
cap_est_m <- cap_est[paste0(months_forward(start_date, i), "/", months_forward(start_date, i + 12) - 1), tickers]
cmean <- data.frame(matrix(nrow = 1, ncol = 30))
colnames(cmean) <- tickers
for(j in tickers){
cmean[j] <- mean(cap_est_m[,j], na.rm = TRUE)
}
sorted <- sort(cmean[1,], decreasing = TRUE)
# 10 highest
high[paste0(months_forward(start_date, i + 12)), 1:10] <- colnames(sorted[1:10])
# 10 mid
mid[paste0(months_forward(start_date, i + 12)), 1:10] <- colnames(sorted[11:20])
# 10 lowest
if(i <= 29){
low[paste0(months_forward(start_date, i + 12)), 1:9] <- colnames(sorted[21:29])
low[paste0(months_forward(start_date, i + 12)), 10] <- "GM"
} else {
low[paste0(months_forward(start_date, i + 12)), 1:10] <- colnames(sorted[21:30])
}
}
save(high, file = "df_high.Rda")
write.csv2(data.frame(high), file = "df_high.csv")
save(mid, file = "df_mid.Rda")
write.csv2(data.frame(mid), file = "df_mid.csv")
save(low, file = "df_low.Rda")
write.csv2(data.frame(low), file = "df_low.csv")
View(high)
View(low)
load("price_data_close.Rda")
libraries <- c("aTSA", "forecast", "nloptr", "quantmod", "xgboost", "xts", "zoo")
for(i in libraries){
installed <- require(i, character.only = TRUE)
if(installed == FALSE){
install.packages(i)
}
}
rm(i, installed, libraries)
df <- read.csv("c_list.csv", sep = ",", header = TRUE, row.names = 1)
df <- as.xts(df)
load("price_data.Rda")
get_month_length <- function(date){
year <- as.numeric(format(date, '%Y'))
if((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0){
month_days_number = c(31,29,31,30,31,30,31,31,30,31,30,31)
}else{
month_days_number = c(31,28,31,30,31,30,31,31,30,31,30,31)
}
month <- as.numeric(format(date, '%m'))
return(month_days_number[month])
}
months_forward <- function(date, n){
if(n == 0){
return(date)
}
new_date <- date
for(i in 1:n){
new_date = new_date + get_month_length(new_date)
}
return(new_date)
}
get_xgb_forecasts <- function(subset, oos_index, n, nrounds, eta, gamma, max_depth, lambda, subsample)
{
subset <- as.xts(subset)
defaultW <- getOption("warn")
options(warn = -1)
for(a in 1:30){
if(a == 1){
subset <- na.omit(subset)
subset$returns <- log(subset$close / lag(subset$close, k = 1))
subset <- subset[,-1]
}
set.seed(2611)
# shifted returns
if(a == 1){
for(b in 1:n){
temp <- lag(subset$returns, k = b)
subset <- cbind(subset, temp)
}
#label
subset$label <- lag(subset$returns, k = -1)
subset <- subset[-c(seq(1, n+1))]
}
if(a != 1){
for(b in 1:n){
subset[length(subset$returns), 1 + b] <- subset[length(subset$returns) - b, "returns"]
}
}
subset = as.xts(subset)
# XGBoost
if(a == 1){
train <- as.matrix(subset[, 1:(length(colnames(subset))-1)])
len <- length(train[,1])-1
train <- train[1:len,]
label <- as.matrix(subset[,length(colnames(subset))])
label <- label[1:len,]
params <- list(booster = "gbtree", objective = "reg:squarederror", eta = eta, gamma = gamma, max_depth = max_depth,
lambda = lambda, subsample = subsample)
model <- xgboost(params = params, data = train, label = label, nrounds = nrounds, verbose = F)
}
pred_vars <- as.matrix(subset[length(subset$returns), 1:(length(colnames(subset))-1)])
pred <- predict(model, pred_vars)
dff <- data.frame(t(rep(NA, length(colnames(subset)))))
rownames(dff) <- oos_index[a]
dff <- as.xts(dff)
subset <- rbind(subset, dff)
subset$returns[length(subset$returns),] <- pred
}
pred_returns <- subset$returns[(length(subset$returns)-29):(length(subset$returns))]
options(warn = defaultW)
return(pred_returns)
}
# ------ PARAMETER SETTING SECTION ------
#portfolio rebalancing window length (months)
f <- 1
#number of assets
n <- 30
#estimation window (months)
t <- 12
#beginning date of the first estimation window
start_date <- as.Date('2006-10-01', '%Y-%m-%d')
#n parameter for XGBoost feature engineering
n_param <- 10
#XGBoost hyperparameters:
nrounds <- 100 #base case: 100, SA: 50, 200
eta <- 0.3 #base case: 0.3, SA: 0.01, 0.05, 0.1
gamma <- 0 #base case: 0, SA: 0.1, 0.2
lambda <- 1 #base case: 1, SA: 0.5, 5, 10
max_depth <- 6 #base case: 6, SA: 3, 9, 12
subsample <- 1 #base case: 1, SA: 0.5, 0.75
#path for the results folder
path_folder <- "xgboost_forecastss"
path <- paste0(path_folder, "/")
# ------ END OF PARAMETER SETTING SECTION ------
ptm <- proc.time()
for(i in 0:191){ #191
forecasts_df <- data.frame()
forecasts_df_colnames <- NULL
for(j in 1:30){ #30
if(df[months_forward(start_date, i+t), j] != "GM"){
print(paste("Period no (i + 1): ", i + 1, "/192 - Stock no (j): ", j, "/30 - Progress: ", round((j + i * 30) / ( 192 * 30 ) * 100, digits = 2), "%" , sep = ""))
subset <- price_data[paste0(months_forward(start_date, i), "/", months_forward(start_date, i+t)-1), df[paste(months_forward(start_date, i+t)), j]]
colname_to_results <- colnames(subset)
colnames(subset) <- c("close")
oos_index <- rownames(data.frame(price_data[paste0(months_forward(start_date, i + t), "/", months_forward(start_date, i+t+2), sep = ""), 1]))
oos_index <- oos_index[1:30]
if(i == 191){
lmao <- getSymbols("MMM", from = "2022-12-01", to = "2023-03-01", env = NULL)
oos_index <- index(lmao)
oos_index <- oos_index[1:30]
}
x <- NULL
x <- get_xgb_forecasts(subset, oos_index, n_param, nrounds, eta, gamma, max_depth, lambda, subsample)
colnames(x) <- df[months_forward(start_date, i+t), j]
if(j == 1){
forecasts_df <- x
} else {
forecasts_df <- cbind(forecasts_df, x)
}
forecasts_df_colnames <- c(forecasts_df_colnames, colname_to_results)
#readline()
}
}
colnames(forecasts_df) <- forecasts_df_colnames
write.csv(forecasts_df, file = paste(path, months_forward(start_date, i+t), ".csv", sep = ""))
}
libraries <- c("aTSA", "forecast", "nloptr", "quantmod", "xgboost", "xts", "zoo")
for(i in libraries){
installed <- require(i, character.only = TRUE)
if(installed == FALSE){
install.packages(i)
}
}
rm(i, installed, libraries)
df <- read.csv("c_list.csv", sep = ",", header = TRUE, row.names = 1)
df <- as.xts(df)
load("price_data.Rda")
get_month_length <- function(date){
year <- as.numeric(format(date, '%Y'))
if((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0){
month_days_number = c(31,29,31,30,31,30,31,31,30,31,30,31)
}else{
month_days_number = c(31,28,31,30,31,30,31,31,30,31,30,31)
}
month <- as.numeric(format(date, '%m'))
return(month_days_number[month])
}
months_forward <- function(date, n){
if(n == 0){
return(date)
}
new_date <- date
for(i in 1:n){
new_date = new_date + get_month_length(new_date)
}
return(new_date)
}
get_xgb_forecasts <- function(subset, oos_index, n, nrounds, eta, gamma, max_depth, lambda, subsample)
{
subset <- as.xts(subset)
defaultW <- getOption("warn")
options(warn = -1)
for(a in 1:30){
if(a == 1){
subset <- na.omit(subset)
subset$returns <- log(subset$close / lag(subset$close, k = 1))
subset <- subset[,-1]
}
set.seed(2611)
# shifted returns
if(a == 1){
for(b in 1:n){
temp <- lag(subset$returns, k = b)
subset <- cbind(subset, temp)
}
#label
subset$label <- lag(subset$returns, k = -1)
subset <- subset[-c(seq(1, n+1))]
}
if(a != 1){
for(b in 1:n){
subset[length(subset$returns), 1 + b] <- subset[length(subset$returns) - b, "returns"]
}
}
subset = as.xts(subset)
# XGBoost
if(a == 1){
train <- as.matrix(subset[, 1:(length(colnames(subset))-1)])
len <- length(train[,1])-1
train <- train[1:len,]
label <- as.matrix(subset[,length(colnames(subset))])
label <- label[1:len,]
params <- list(booster = "gbtree", objective = "reg:squarederror", eta = eta, gamma = gamma, max_depth = max_depth,
lambda = lambda, subsample = subsample)
model <- xgboost(params = params, data = train, label = label, nrounds = nrounds, verbose = F)
}
pred_vars <- as.matrix(subset[length(subset$returns), 1:(length(colnames(subset))-1)])
pred <- predict(model, pred_vars)
dff <- data.frame(t(rep(NA, length(colnames(subset)))))
rownames(dff) <- oos_index[a]
dff <- as.xts(dff)
subset <- rbind(subset, dff)
subset$returns[length(subset$returns),] <- pred
}
pred_returns <- subset$returns[(length(subset$returns)-29):(length(subset$returns))]
options(warn = defaultW)
return(pred_returns)
}
# ------ PARAMETER SETTING SECTION ------
#portfolio rebalancing window length (months)
f <- 1
#number of assets
n <- 30
#estimation window (months)
t <- 12
#beginning date of the first estimation window
start_date <- as.Date('2006-10-01', '%Y-%m-%d')
#n parameter for XGBoost feature engineering
n_param <- 10
#XGBoost hyperparameters:
nrounds <- 100 #base case: 100, SA: 50, 200
eta <- 0.3 #base case: 0.3, SA: 0.01, 0.05, 0.1
gamma <- 0 #base case: 0, SA: 0.1, 0.2
lambda <- 1 #base case: 1, SA: 0.5, 5, 10
max_depth <- 6 #base case: 6, SA: 3, 9, 12
subsample <- 1 #base case: 1, SA: 0.5, 0.75
#path for the results folder
path_folder <- "xgboost_forecastss"
path <- paste0(path_folder, "/")
# ------ END OF PARAMETER SETTING SECTION ------
ptm <- proc.time()
for(i in 0:191){ #191
forecasts_df <- data.frame()
forecasts_df_colnames <- NULL
for(j in 1:30){ #30
if(df[months_forward(start_date, i+t), j] != "GM"){
print(paste("Period no (i + 1): ", i + 1, "/192 - Stock no (j): ", j, "/30 - Progress: ", round((j + i * 30) / ( 192 * 30 ) * 100, digits = 2), "%" , sep = ""))
subset <- price_data[paste0(months_forward(start_date, i), "/", months_forward(start_date, i+t)-1), df[paste(months_forward(start_date, i+t)), j]]
colname_to_results <- colnames(subset)
colnames(subset) <- c("close")
oos_index <- rownames(data.frame(price_data[paste0(months_forward(start_date, i + t), "/", months_forward(start_date, i+t+2), sep = ""), 1]))
oos_index <- oos_index[1:30]
if(i == 191){
lmao <- getSymbols("MMM", from = "2022-12-01", to = "2023-03-01", env = NULL)
oos_index <- index(lmao)
oos_index <- oos_index[1:30]
}
x <- NULL
x <- get_xgb_forecasts(subset, oos_index, n_param, nrounds, eta, gamma, max_depth, lambda, subsample)
colnames(x) <- df[months_forward(start_date, i+t), j]
if(j == 1){
forecasts_df <- x
} else {
forecasts_df <- cbind(forecasts_df, x)
}
forecasts_df_colnames <- c(forecasts_df_colnames, colname_to_results)
#readline()
}
}
colnames(forecasts_df) <- forecasts_df_colnames
write.csv(forecasts_df, file = paste(path, months_forward(start_date, i+t), ".csv", sep = ""))
}
libraries <- c("aTSA", "forecast", "nloptr", "quantmod", "xgboost", "xts", "zoo")
for(i in libraries){
installed <- require(i, character.only = TRUE)
if(installed == FALSE){
install.packages(i)
}
}
rm(i, installed, libraries)
# for 1 and 3-month estimation window
df <- read.csv("c_list.csv", sep = ",", header = TRUE, row.names = 1)
df <- as.xts(df)
# for 2-week estimation window
df2 <- read.csv("c_list_f_05.csv", sep = ",", header = TRUE, row.names = 1)
df2 <- as.xts(df2)
get_month_length <- function(date){
year <- as.numeric(format(date, '%Y'))
if((year %% 4 == 0 & year %% 100 != 0) | year %% 400 == 0){
month_days_number = c(31,29,31,30,31,30,31,31,30,31,30,31)
}else{
month_days_number = c(31,28,31,30,31,30,31,31,30,31,30,31)
}
month <- as.numeric(format(date, '%m'))
return(month_days_number[month])
}
months_forward <- function(date, n){
if(n == 0){
return(date)
}
new_date <- date
for(i in 1:n){
new_date = new_date + get_month_length(new_date)
}
return(new_date)
}
load("price_data.Rda")
get_xgb_forecasts <- function(subset, oos_index, n, nrounds, eta, gamma, max_depth, lambda, subsample, nahead)
{
subset <- as.xts(subset)
defaultW <- getOption("warn")
options(warn = -1)
for(a in 1:nahead){
if(a == 1){
subset <- na.omit(subset)
subset$returns <- log(subset$close / lag(subset$close, k = 1))
subset <- subset[,-1]
}
set.seed(2611)
# shifted returns
if(a == 1){
for(b in 1:n){
temp <- lag(subset$returns, k = b)
subset <- cbind(subset, temp)
}
#label
subset$label <- lag(subset$returns, k = -1)
subset <- subset[-c(seq(1, n+1))]
}
if(a != 1){
for(b in 1:n){
subset[length(subset$returns), 1 + b] <- subset[length(subset$returns) - b, "returns"]
}
}
subset = as.xts(subset)
# XGBoost
if(a == 1){
train <- as.matrix(subset[, 1:(length(colnames(subset))-1)])
len <- length(train[,1])-1
train <- train[1:len,]
label <- as.matrix(subset[,length(colnames(subset))])
label <- label[1:len,]
params <- list(booster = "gbtree", objective = "reg:squarederror", eta = eta, gamma = gamma, max_depth = max_depth,
lambda = lambda, subsample = subsample)
model <- xgboost(params = params, data = train, label = label, nrounds = nrounds, verbose = F)
}
pred_vars <- as.matrix(subset[length(subset$returns), 1:(length(colnames(subset))-1)])
pred <- predict(model, pred_vars)
dff <- data.frame(t(rep(NA, length(colnames(subset)))))
rownames(dff) <- oos_index[a]
dff <- as.xts(dff)
subset <- rbind(subset, dff)
subset$returns[length(subset$returns),] <- pred
}
pred_returns <- subset$returns[(length(subset$returns)-nahead+1):(length(subset$returns))]
options(warn = defaultW)
return(pred_returns)
}
#####################
# f = 0.5 (2 weeks) #
#####################
# ------ PARAMETER SETTING SECTION ------
#portfolio rebalancing window length (months)
f <- 1
#number of assets
n <- 30
#estimation window (months)
t <- 12
#beginning date of the first estimation window
est_date <- as.Date('2006-01-01', '%Y-%m-%d')
#beginning date of the first rebalancing period
start_date <- as.Date('2007-01-01', '%Y-%m-%d')
#n parameter for XGBoost feature engineering
n_param <- 10
#XGBoost hyperparameters:
nrounds <- 100
eta <- 0.3
gamma <- 0
lambda <- 1
max_depth <- 6
subsample <- 1
#path for the results folder
path_folder <- "xgboost_forecasts_f_005"
path <- paste0(path_folder, "/")
# ------ END OF PARAMETER SETTING SECTION ------
ptm <- proc.time()
for(i in 0:417){ #417
forecasts_df <- data.frame()
forecasts_df_colnames <- NULL
for(j in 1:30){ #30
if(df2[start_date + 14 * i, j] != "GM"){
print(paste("Period no (i + 1): ", i + 1, "/418 - Stock no (j): ", j, "/30 - Progress: ", round((j + i * 30) / ( 418 * 30 ) * 100, digits = 2), "%" , sep = ""))
subset <- price_data[paste0(est_date + 14 * i, "/", months_forward(est_date + 14 * i, t)-1), df2[start_date + 14 * i, j]]
colname_to_results <- colnames(subset)
colnames(subset) <- c("close")
oos_index <- rownames(data.frame(price_data[paste0(start_date + 14 * i,"/", start_date + 14 * i + 70, sep = ""), 1]))
oos_index <- oos_index[1:30]
if(i > 413){
lmao <- getSymbols("MMM", from = "2022-12-01", to = "2023-05-01", env = NULL)
oos_index <- index(lmao[paste0(start_date + 14 * i,"/", start_date + 14 * i + 70, sep = ""), 1])
oos_index <- oos_index[1:30]
}
if(i == 320 & j == 30){
x[1:length(x)] = 0
} else {
x <- NULL
x <- get_xgb_forecasts(subset, oos_index, n_param, nrounds, eta, gamma, max_depth, lambda, subsample, 30)
colnames(x) <- df2[start_date + 14 * i, j]
}
if(j == 1){
forecasts_df <- x
} else {
forecasts_df <- cbind(forecasts_df, x)
}
forecasts_df_colnames <- c(forecasts_df_colnames, colname_to_results)
#readline()
}
}
colnames(forecasts_df) <- forecasts_df_colnames
write.csv(forecasts_df, file = paste0(path, start_date + 14 * i, ".csv", sep = ""))
}
